#!/usr/bin/env python

from __future__ import print_function
import sisfft
import argparse
import numpy
np = numpy
import sys

DEFAULT_REPEAT = 10
DEFAULT_LENGTH = '(2**x for x in range(1, 14))'
DEFAULT_ALPHA = 1e3
DEFAULT_LIMIT = 1e-10

def rel(x, y):
    return np.abs(np.expm1(x - y))

def ranges(v):
    return v.max() - sisfft.utils.log_min_pos(v), sisfft.utils.log_dynamic_range(v)
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-r', '--repeats', type=int, default=DEFAULT_REPEAT,
                       help = 'number of PMFs to test')
    parser.add_argument('-n', '--lengths', default=DEFAULT_LENGTH,
                        help = 'expression generating the lengths to test with')
    parser.add_argument('-a', '--alpha', default=DEFAULT_ALPHA, type=float,
                        help = 'the alpha to use')
    parser.add_argument('-l', '--limit', type=float, action='append',
                        help = 'the limit to generate values to')
    args = parser.parse_args()

    lengths = list(eval(args.lengths))
    alpha = args.alpha
    limits = args.limit or [DEFAULT_LIMIT]

    np.random.seed(1)
    print('L,dynrange1,dynrange2,dynrange,R1,R2,R,bad,actual_bad')
    for n in lengths:
        for limit1 in limits:
            for limit2 in limits:
                count_bad = 0
                count_actual_bad = 0

                count_had_bad = 0
                count_had_actual_bad = 0
                for _ in range(args.repeats):
                    v1 = np.random.random(n) * np.log(limit1)
                    v1 -= sisfft.utils.log_sum(v1)
                    v2 = np.random.random(n) * np.log(limit2)
                    v2 -= sisfft.utils.log_sum(v2)

                    exact = sisfft.naive.convolve_naive(v1, v2)
                    conv, bad_places = sisfft.psfft.checked_fftc(v1, v2, alpha)
                    this_bad = 0
                    this_actual_bad = 0
                    for i in bad_places:
                        this_bad += 1
                        if rel(conv[i], exact[i]) > 1.0 / alpha:
                            this_actual_bad += 1

                    dynrange1, R1 = ranges(v1)
                    dynrange2, R2 = ranges(v2)
                    dynrange, R = ranges(exact)

                    count_bad += this_bad
                    count_actual_bad += this_actual_bad
                    count_had_bad += int(this_bad > 0)
                    count_had_actual_bad += int(this_actual_bad > 0)

                    print('%d,%f,%f,%f,%f,%f,%f,%d,%d' % (
                          n,
                          dynrange1, dynrange2, dynrange,
                          R1, R2, R,
                          this_bad, this_actual_bad))


                def summary(x, y):
                    if y == 0:
                        pct = 100 if x == 0 else float('nan')
                    else:
                        pct = float(x) / y * 100
                    return '%d/%d (%.0f%%)' % (x, y, pct)
                print('length %s, limit1 %e, limit2 %e, elementwise %s, whole vector %s' % (
                    n, limit1, limit2,
                    summary(count_actual_bad, count_bad),
                    summary(count_had_actual_bad, count_had_bad)),
                      file = sys.stderr)

if __name__ == '__main__':
    main()
